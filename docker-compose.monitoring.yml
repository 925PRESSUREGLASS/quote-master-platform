# OpenTelemetry Observability Stack
# Provides OTLP Collector, Jaeger, and Prometheus for production tracing

version: '3.8'

services:
  # OpenTelemetry Collector - Receives, processes, and exports telemetry data
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: quote-master-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./monitoring/otel-collector.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver  
      - "8889:8889"   # Prometheus metrics
      - "8888:8888"   # Metrics endpoint
      - "55679:55679" # Extension endpoint
    depends_on:
      - jaeger
      - prometheus
    restart: unless-stopped
    networks:
      - quote-master-monitoring

  # Jaeger - Distributed tracing backend and UI
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quote-master-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # Jaeger gRPC
      - "14268:14268" # Jaeger HTTP
      - "6831:6831/udp" # Jaeger agent
      - "6832:6832/udp" # Jaeger agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
    restart: unless-stopped
    networks:
      - quote-master-monitoring
    volumes:
      - jaeger_data:/tmp

  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: quote-master-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - quote-master-monitoring

  # Grafana - Metrics visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: quote-master-grafana
    ports:
      - "3001:3000"  # Changed to avoid conflict with frontend
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - quote-master-monitoring
    depends_on:
      - prometheus

  # Redis for caching (used by the application)
  redis:
    image: redis:7-alpine
    container_name: quote-master-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - quote-master-monitoring
    command: redis-server --appendonly yes

volumes:
  prometheus_data:
  grafana_data:
  jaeger_data:
  redis_data:

networks:
  quote-master-monitoring:
    driver: bridge
