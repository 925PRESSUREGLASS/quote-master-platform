name: Security Scans

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ==========================================
  # Dependency Vulnerability Scan
  # ==========================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Python Security Scan with Safety
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Python Security Scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Node.js Security Audit
      run: |
        cd frontend
        npm audit --audit-level moderate --json > npm-audit-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          frontend/npm-audit-report.json

  # ==========================================
  # CodeQL Analysis
  # ==========================================
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # ==========================================
  # OWASP Dependency Check
  # ==========================================
  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      id: depcheck
      with:
        project: 'quote-master-pro'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7

    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: owasp-dependency-check-reports
        path: reports/

  # ==========================================
  # Docker Image Security Scan
  # ==========================================
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: |
        docker build -t quote-master-pro:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'quote-master-pro:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'

  # ==========================================
  # Secret Scanning
  # ==========================================
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # ==========================================
  # Infrastructure as Code Security
  # ==========================================
  iac-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Checkov GitHub Action
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: .
        framework: dockerfile,github_actions
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  # ==========================================
  # License Compliance Check
  # ==========================================
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-licenses
      run: pip install pip-licenses

    - name: Install Python dependencies
      run: pip install -r requirements.txt

    - name: Check Python licenses
      run: |
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --summary

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install license-checker
      run: npm install -g license-checker

    - name: Check Node.js licenses
      run: |
        cd frontend
        npm ci
        license-checker --json --out ../node-licenses.json
        license-checker --summary

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          python-licenses.json
          node-licenses.json

  # ==========================================
  # Security Report Summary
  # ==========================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql, owasp-dependency-check, docker-security-scan, secret-scan, iac-security, license-check]
    if: always()
    
    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- CodeQL Analysis: ${{ needs.codeql.result }}" >> security-summary.md
        echo "- OWASP Dependency Check: ${{ needs.owasp-dependency-check.result }}" >> security-summary.md
        echo "- Docker Security Scan: ${{ needs.docker-security-scan.result }}" >> security-summary.md
        echo "- Secret Scanning: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- Infrastructure Security: ${{ needs.iac-security.result }}" >> security-summary.md
        echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      run: |
        echo "Security scan completed. Check artifacts for detailed reports."
        # Add logic to comment on PR with security summary